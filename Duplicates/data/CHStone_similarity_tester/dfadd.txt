File E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: 575 tokens, 188 lines
File E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: 1131 tokens, 303 lines
Total: 1706 tokens

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 18-65|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 66-114[146]
#define N 46                           |};
const float64 a_input[N] = {           |
0x7FF8000000000000ULL,                 |const float64 b_input[N] = {
0x7FF0000000000000ULL,                 |0x3FF0000000000000ULL,
0x4000000000000000ULL,                 |0x3FF0000000000000ULL,
0x4000000000000000ULL,                 |0x0000000000000000ULL,
0x3FF0000000000000ULL,                 |0x3FF8000000000000ULL,
0x3FF0000000000000ULL,                 |0x7FF8000000000000ULL,
0x0000000000000000ULL,                 |0x7FF0000000000000ULL,
0x3FF8000000000000ULL,                 |0x4000000000000000ULL,
0x7FF8000000000000ULL,                 |0x4000000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x0000000000000000ULL,                 |0x7FF0000000000000ULL,
0x3FF8000000000000ULL,                 |0x0000000000000000ULL,
0xFFF8000000000000ULL,                 |0x3FF0000000000000ULL,
0xFFF0000000000000ULL,                 |0xBFF0000000000000ULL,
0xC000000000000000ULL,                 |0xBFF0000000000000ULL,
0xC000000000000000ULL,                 |0x8000000000000000ULL,
0xBFF0000000000000ULL,                 |0xBFF8000000000000ULL,
0xBFF0000000000000ULL,                 |0xFFF8000000000000ULL,
0x8000000000000000ULL,                 |0xFFF0000000000000ULL,
0xBFF8000000000000ULL,                 |0xC000000000000000ULL,
0xFFF8000000000000ULL,                 |0xC000000000000000ULL,
0xFFF0000000000000ULL,                 |0xFFF0000000000000ULL,
0x8000000000000000ULL,                 |0xFFF0000000000000ULL,
0xBFF8000000000000ULL,                 |0x8000000000000000ULL,
0x7FF8000000000000ULL,                 |0xBFF0000000000000ULL,
0x7FF0000000000000ULL,                 |0xFFF0000000000000ULL,
0x3FF0000000000000ULL,                 |0xFFF0000000000000ULL,
0x3FF0000000000000ULL,                 |0xBFF0000000000000ULL,
0x3FF0000000000000ULL,                 |0xFFF8000000000000ULL,
0x0000000000000000ULL,                 |0xFFF0000000000000ULL,
0x3FF8000000000000ULL,                 |0xBFF0000000000000ULL,
0x7FF8000000000000ULL,                 |0xC000000000000000ULL,
0x7FF0000000000000ULL,                 |0xBFF0000000000000ULL,
0x3FF0000000000000ULL,                 |0xBFF0000000000000ULL,
0x4000000000000000ULL,                 |0x8000000000000000ULL,
0xFFF0000000000000ULL,                 |0xBFF8000000000000ULL,
0xFFF0000000000000ULL,                 |0x7FF8000000000000ULL,
0xBFF0000000000000ULL,                 |0x7FF0000000000000ULL,
0xBFF0000000000000ULL,                 |0x3FF0000000000000ULL,
0xBFF0000000000000ULL,                 |0x7FF8000000000000ULL,
0x8000000000000000ULL,                 |0x7FF0000000000000ULL,
0xBFF8000000000000ULL,                 |0x3FF0000000000000ULL,
0xFFF8000000000000ULL,                 |0x4000000000000000ULL,
0xFFF0000000000000ULL,                 |0x3FF0000000000000ULL,
0xBFF0000000000000ULL,                 |0x3FF0000000000000ULL,
0xC000000000000000ULL                  |0x0000000000000000ULL,
                                       |0x3FF8000000000000ULL

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 66-114|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 115-163[146]
};                                     |};
                                       |
const float64 b_input[N] = {           |const float64 z_output[N] = {
0x3FF0000000000000ULL,                 |0x7FF8000000000000ULL,
0x3FF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x0000000000000000ULL,                 |0x4000000000000000ULL,
0x3FF8000000000000ULL,                 |0x400C000000000000ULL,
0x7FF8000000000000ULL,                 |0x7FF8000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x4000000000000000ULL,                 |0x4000000000000000ULL,
0x4000000000000000ULL,                 |0x400C000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FF8000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x0000000000000000ULL,                 |0x0000000000000000ULL,
0x3FF0000000000000ULL,                 |0x4004000000000000ULL,
0xBFF0000000000000ULL,                 |0xFFF8000000000000ULL,
0xBFF0000000000000ULL,                 |0xFFF0000000000000ULL,
0x8000000000000000ULL,                 |0xC000000000000000ULL,
0xBFF8000000000000ULL,                 |0xC00C000000000000ULL,
0xFFF8000000000000ULL,                 |0xFFF8000000000000ULL,
0xFFF0000000000000ULL,                 |0xFFF0000000000000ULL,
0xC000000000000000ULL,                 |0xC000000000000000ULL,
0xC000000000000000ULL,                 |0xC00C000000000000ULL,
0xFFF0000000000000ULL,                 |0xFFF8000000000000ULL,
0xFFF0000000000000ULL,                 |0xFFF0000000000000ULL,
0x8000000000000000ULL,                 |0x8000000000000000ULL,
0xBFF0000000000000ULL,                 |0xC004000000000000ULL,
0xFFF0000000000000ULL,                 |0x7FF8000000000000ULL,
0xFFF0000000000000ULL,                 |0x7FFFFFFFFFFFFFFFULL,
0xBFF0000000000000ULL,                 |0x0000000000000000ULL,
0xFFF8000000000000ULL,                 |0xFFF8000000000000ULL,
0xFFF0000000000000ULL,                 |0xFFF0000000000000ULL,
0xBFF0000000000000ULL,                 |0xBFF0000000000000ULL,
0xC000000000000000ULL,                 |0xBFE0000000000000ULL,
0xBFF0000000000000ULL,                 |0x7FF8000000000000ULL,
0xBFF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x8000000000000000ULL,                 |0x3FF0000000000000ULL,
0xBFF8000000000000ULL,                 |0x3FE0000000000000ULL,
0x7FF8000000000000ULL,                 |0x7FF8000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FFFFFFFFFFFFFFFULL,
0x3FF0000000000000ULL,                 |0x0000000000000000ULL,
0x7FF8000000000000ULL,                 |0x7FF8000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x3FF0000000000000ULL,                 |0x3FF0000000000000ULL,
0x4000000000000000ULL,                 |0x3FE0000000000000ULL,
0x3FF0000000000000ULL,                 |0xFFF8000000000000ULL,
0x3FF0000000000000ULL,                 |0xFFF0000000000000ULL,
0x0000000000000000ULL,                 |0xBFF0000000000000ULL,
0x3FF8000000000000ULL                  |0xBFE0000000000000ULL

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: line 133-151|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: line 206-224[79]
return roundAndPackFloat64 (zSign, zEx |return roundAndPackFloat64 (zSign, zEx
                                       |
}                                      |}
# 243 "CHStoneProcessed/dfadd/softfloa |# 324 "CHStoneProcessed/dfadd/softfloa
static float64                         |static float64
addFloat64Sigs (float64 a, float64 b,  |subFloat64Sigs (float64 a, float64 b, 
{                                      |{
int16 aExp, bExp, zExp;                |int16 aExp, bExp, zExp;
bits64 aSig, bSig, zSig;               |bits64 aSig, bSig, zSig;
int16 expDiff;                         |int16 expDiff;
                                       |
aSig = extractFloat64Frac (a);         |aSig = extractFloat64Frac (a);
aExp = extractFloat64Exp (a);          |aExp = extractFloat64Exp (a);
bSig = extractFloat64Frac (b);         |bSig = extractFloat64Frac (b);
bExp = extractFloat64Exp (b);          |bExp = extractFloat64Exp (b);
expDiff = aExp - bExp;                 |expDiff = aExp - bExp;
aSig <<= 9;                            |aSig <<= 10;
bSig <<= 9;                            |bSig <<= 10;
if (0 < expDiff)                       |if (0 < expDiff)

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 117-139|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 139-161[66]
const float64 z_output[N] = {          |0xFFF0000000000000ULL,
0x7FF8000000000000ULL,                 |0x8000000000000000ULL,
0x7FF0000000000000ULL,                 |0xC004000000000000ULL,
0x4000000000000000ULL,                 |0x7FF8000000000000ULL,
0x400C000000000000ULL,                 |0x7FFFFFFFFFFFFFFFULL,
0x7FF8000000000000ULL,                 |0x0000000000000000ULL,
0x7FF0000000000000ULL,                 |0xFFF8000000000000ULL,
0x4000000000000000ULL,                 |0xFFF0000000000000ULL,
0x400C000000000000ULL,                 |0xBFF0000000000000ULL,
0x7FF8000000000000ULL,                 |0xBFE0000000000000ULL,
0x7FF0000000000000ULL,                 |0x7FF8000000000000ULL,
0x0000000000000000ULL,                 |0x7FF0000000000000ULL,
0x4004000000000000ULL,                 |0x3FF0000000000000ULL,
0xFFF8000000000000ULL,                 |0x3FE0000000000000ULL,
0xFFF0000000000000ULL,                 |0x7FF8000000000000ULL,
0xC000000000000000ULL,                 |0x7FFFFFFFFFFFFFFFULL,
0xC00C000000000000ULL,                 |0x0000000000000000ULL,
0xFFF8000000000000ULL,                 |0x7FF8000000000000ULL,
0xFFF0000000000000ULL,                 |0x7FF0000000000000ULL,
0xC000000000000000ULL,                 |0x3FF0000000000000ULL,
0xC00C000000000000ULL,                 |0x3FE0000000000000ULL,
0xFFF8000000000000ULL,                 |0xFFF8000000000000ULL,
0xFFF0000000000000ULL,                 |0xFFF0000000000000ULL,

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: line 152-163|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: line 263-274[49]
{                                      |aExpBigger:
if (aExp == 0x7FF)                     |if (aExp == 0x7FF)
{                                      |{
if (aSig)                              |if (aSig)
return propagateFloat64NaN (a, b);     |return propagateFloat64NaN (a, b);
return a;                              |return a;
}                                      |}
if (bExp == 0)                         |if (bExp == 0)
--expDiff;                             |--expDiff;
else                                   |else
bSig |= LIT64 (0x2000000000000000);    |bSig |= LIT64 (0x4000000000000000);
shift64RightJamming (bSig, expDiff, &b |shift64RightJamming (bSig, expDiff, &b

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 139-150|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\dfadd.c: line 150-161[33]
0xFFF0000000000000ULL,                 |0x7FF0000000000000ULL,
0x8000000000000000ULL,                 |0x3FF0000000000000ULL,
0xC004000000000000ULL,                 |0x3FE0000000000000ULL,
0x7FF8000000000000ULL,                 |0x7FF8000000000000ULL,
0x7FFFFFFFFFFFFFFFULL,                 |0x7FFFFFFFFFFFFFFFULL,
0x0000000000000000ULL,                 |0x0000000000000000ULL,
0xFFF8000000000000ULL,                 |0x7FF8000000000000ULL,
0xFFF0000000000000ULL,                 |0x7FF0000000000000ULL,
0xBFF0000000000000ULL,                 |0x3FF0000000000000ULL,
0xBFE0000000000000ULL,                 |0x3FE0000000000000ULL,
0x7FF8000000000000ULL,                 |0xFFF8000000000000ULL,
0x7FF0000000000000ULL,                 |0xFFF0000000000000ULL,

E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: line 122-128|E:\work\HLS2018\CHStone\CHStoneProcessed\dfadd\softfloat.c: line 205-211[27]
zExp = 0;                              |roundAndPack:
return packFloat64 (zSign, zExp, zSig) |return roundAndPackFloat64 (zSign, zEx
                                       |
}                                      |}
# 225 "CHStoneProcessed/dfadd/softfloa |# 324 "CHStoneProcessed/dfadd/softfloa
static float64                         |static float64
normalizeRoundAndPackFloat64 (flag zSi |subFloat64Sigs (float64 a, float64 b, 

